
Smart Contract
  A smart contract is a self-executing program stored on a blockchain that automatically enforces the terms and conditions of an agreement when predefined conditions are met, without the need for intermediaries.



Deploying a Contract
   Deploying a Contract refers to the process of uploading and activating a smart contract on a blockchain network, making it accessible and usable by others. Once deployed, the contract gets a unique address on the blockchain and becomes immutable, meaning its code cannot be changed. Deployment typically involves:

     1.	Writing the Contract – usually in a language like Solidity (for Ethereum).
     2.	Compiling – converting the source code into bytecode that the blockchain understands.
     3.	Deploying – sending a transaction with the compiled code to the blockchain, often using tools like Remix, Hardhat, or Truffle.
     4.	Paying Gas Fees – the deployment requires gas (a small amount of cryptocurrency) to compensate for computation.



Gas
    Gas is the unit that measures the computational effort needed to perform operations on the Ethereum blockchain. Every transaction or smart contract execution uses gas, which is paid in Ether (ETH). Complex operations use more gas. You set:
        •	Gas Limit – max gas you're willing to use
        •	Gas Price – how much ETH you're willing to pay per unit of gas
     If a transaction runs out of gas, it fails but still costs gas.



Opcodes
     Opcodes are low-level instructions the Ethereum Virtual Machine (EVM) executes, like ADD, MUL, or SSTORE. Smart contracts are compiled into bytecode made of these opcodes. Each opcode has a specific gas cost depending on its complexity.

  Gas + opcodes together determine how much a smart contract costs to run.




Transaction Life Cycle
      1.Transaction Creation
          A user (or smart contract) creates a transaction, specifying details like the recipient (to), amount, gas limit, gas price, and optional data.
      2.Transaction Signing
          The transaction is cryptographically signed using the sender's private key to prove authenticity.
      3.Broadcast to Network
          The signed transaction is sent to the network and enters the mempool (a pool of pending transactions).
      4.Picked by Miner / Validator
          A miner (PoW) or validator (PoS) selects the transaction from the mempool and includes it in a new block.
      5.Block Confirmation
          Once included in a block, the transaction is considered confirmed. More blocks added afterward increase the transaction's finality.
      6.Execution
          The Ethereum Virtual Machine (EVM) executes the transaction:
          	If it's a contract deployment, it stores code at a new address.
          	If it's a contract call, it executes the corresponding function.
      7.State Update
          The blockchain updates its state (balances, storage, etc.) based on the transaction’s result.

      8.Receipt Generation
          A transaction receipt is generated, showing the outcome (success/failure), gas used, logs/events, and any contract address (if deployed).

